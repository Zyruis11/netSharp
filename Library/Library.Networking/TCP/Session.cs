using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Library.Networking.TCP.Features;

namespace Library.Networking.TCP
{
    public class Session : IDisposable
    {
        private ASCIIEncoding _asciiEncoding;
        private NetworkStream _networkStream;
        private Task _streamReaderThread;
        private TcpClient _tcpClient;

        /// <summary>
        /// </summary>
        /// <param name="ipEndPoint"></param>
        /// <param name="sessionType">0 = Session to Client, 1 = Session to ToServer</param>
        /// <param name="tcpClient"></param>
        public Session(int sessionType, IPEndPoint ipEndPoint, Guid localEndpointGuid, TcpClient tcpClient = null)
        {
            switch (sessionType)
            {
                case 0: // Session to Client, generated by Server.
                {
                    if (tcpClient == null)
                    {
                        throw new Exception("Invalid sessionType");
                    }
                    _tcpClient = tcpClient;
                    RemoteEndpointIpAddressPort = _tcpClient.Client.RemoteEndPoint.ToString();
                    break;
                }
                case 1: // Session to Server, generated by Client.
                {
                    if (tcpClient != null)
                    {
                        throw new Exception("Invalid sessionType");
                    }
                    _tcpClient = new TcpClient();
                    RemoteEndpointIp = ipEndPoint;
                    break;
                }
                default:
                {
                    Dispose();
                    throw new Exception("Invalid/Unspecified sessionType.");
                }
            }

            LocalEndpointGuid = localEndpointGuid;
            //IsDisposed = false;           
            GetStream();
        }

        public bool IsDisposed { get; set; }
        public int LastTwoWay { get; set; }
        public Guid RemoteEndpointGuid { get; set; }
        public Guid LocalEndpointGuid { get; set; }
        public IPEndPoint RemoteEndpointIp { get; set; }
        public string RemoteEndpointIpAddressPort { get; set; }
        public int HelloInterval { get; set; }

        public void Dispose()
        {
            Disconnect();
            IsDisposed = true;
        }

        public string GetFriendlyEndpointGuid()
        {
            return Convert.ToString(RemoteEndpointGuid).Remove(5);
        }

        private void GetStream()
        {
            if (!_tcpClient.Connected)
            {
                _tcpClient.Connect(RemoteEndpointIp);
                RemoteEndpointIpAddressPort = _tcpClient.Client.RemoteEndPoint.ToString();
            }
            _networkStream = _tcpClient.GetStream();
            StartStreamReaderTask();
        }

        public void Disconnect()
        {
            if (_tcpClient.Connected)
            {
                _networkStream.Close();
                _tcpClient.Close();
            }
        }

        public void StartStreamReaderTask()
        {
            _streamReaderThread = new Task(StreamReader);
            _streamReaderThread.Start();
        }

        /// <summary>
        ///     Blocks on the NetworkStream of the TcpClient, it recieves data sent across
        ///     the stream and sends it to a parsing function for further processing.
        /// </summary>
        private void StreamReader()
        {
            // Slow start in case we need to wait for another streamReader to release the stream.
            Thread.Sleep(500);


            while (!IsDisposed)
            {
                _networkStream.Flush();

                var message = new byte[8192];
                var bytesRead = 0;

                try
                {
                    bytesRead = _networkStream.Read(message, 0, 8192); //to-do: Allow variable buffer size

                    if (bytesRead == 0)
                    {
                        break;
                    }
                    _asciiEncoding = new ASCIIEncoding();
                    var clientString = _asciiEncoding.GetString(message, 0, bytesRead);
                    RequestHandler(clientString);
                }
                catch (Exception)
                {
                    //to-do
                    break;
                }
            }
        }

        public void RequestHandler(string clientString)
        {
            var clientStringArray = clientString.Split('_');

            var commandCharacters = clientStringArray[0];
            string innerString = null;
            if (clientStringArray.Length > 1)
            {
                innerString = clientStringArray[1];
            }

            switch (commandCharacters)
            {
                case "CMD":
                {
                    //to-do: Fire event on server
                    break;
                }

                case "HRT":
                {
                    if (innerString == null)
                    {
                        SendString("HRT_ACK");
                    }
                    else
                    {
                        LastTwoWay = 0;
                    }            
                    break;
                }

                case "AID":
                {
                    if (innerString != null) RemoteEndpointGuid = Guid.Parse(innerString);
                    break;
                }
                default:
                {
                    SendString("Unexpected request type recieved.");
                    break;
                }
            }
        }

        public void SendGuid()
        {
            var sendString = "AID_" + LocalEndpointGuid;
            SendString(sendString);
        }

        public void SendHeartbeat(bool isAck = false)
        {
            if (isAck)
            {
                SendString("HRT_ACK");
            }
            else
            {
                SendString("HRT");
            }
        }

        public void SendString(string sendString)
        {
            if (_tcpClient.Connected)
            {
                _asciiEncoding = new ASCIIEncoding();
                var buffer = _asciiEncoding.GetBytes(sendString);
                _networkStream.Write(buffer, 0, buffer.Length);
            }
            else if (!_tcpClient.Connected)
            {
                throw new Exception("Connection not available.");
            }
        }
    }
}