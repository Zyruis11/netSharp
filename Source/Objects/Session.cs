using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using netSharp.Components;
using netSharp.Events;

namespace netSharp.Objects
{
    public class Session : IDisposable
    {
        private readonly TcpClient _tcpClient;
        private ASCIIEncoding _asciiEncoding;
        private Action _messageRecievedCallback;
        private NetworkStream _networkStream;

        /// <summary>
        /// </summary>
        /// <param name="ipEndPoint"></param>
        /// <param name="sessionType">0 = Session to Client, 1 = Session to ToServer</param>
        /// <param name="tcpClient"></param>
        public Session(int sessionType, IPEndPoint ipEndPoint, string localGuid, TcpClient tcpClient = null)
        {
            switch (sessionType)
            {
                case 0: // Session to Client, generated by Server.
                {
                    if (tcpClient == null)
                    {
                        throw new Exception("Invalid sessionType");
                    }
                    _tcpClient = tcpClient;
                    RemoteEndpointIpAddressPort = _tcpClient.Client.RemoteEndPoint.ToString();
                    UseHeartbeat = false;
                    break;
                }
                case 1: // Session to Server, generated by Client.
                {
                    if (tcpClient != null)
                    {
                        throw new Exception("Invalid sessionType");
                    }
                    _tcpClient = new TcpClient();
                    RemoteEndpointIp = ipEndPoint;
                    UseHeartbeat = false;
                    break;
                }
                default:
                {
                    Dispose();
                    throw new Exception("Invalid/Unspecified sessionType.");
                }
            }
            LocalEndpointGuid = localGuid;
            RemoteEndpointGuid = "notset";
            if (UseHeartbeat)
            {
                TimeSinceLastHeartbeatRecieve = 0;
                MaxTimeSinceLastHeartbeatReceive = 30;
                TimeUntilNextHeartbeatSend = 0;
            }
            IdleTime = 0;
            MaxIdleTime = 900;
            Connect();
        }

        public bool IsDisposed { get; set; }
        public string RemoteEndpointGuid { get; set; }
        public string LocalEndpointGuid { get; set; }
        public IPEndPoint RemoteEndpointIp { get; set; }
        public string RemoteEndpointIpAddressPort { get; set; }
        public int TimeSinceLastHeartbeatRecieve { get; set; }
        public int MaxTimeSinceLastHeartbeatReceive { get; set; }
        public int TimeUntilNextHeartbeatSend { get; set; }
        public bool UseHeartbeat { get; set; }
        public int IdleTime { get; set; }
        public int MaxIdleTime { get; set; }
        public byte Cost { get; set; }
        public bool SentGuid { get; set; }

        public void Dispose()
        {
            Disconnect();
            IsDisposed = true;
        }

        public event EventHandler<NetSharpEventArgs> SessionDataRecieved;
        public event EventHandler<NetSharpEventArgs> SessionErrorOccured;
        // Event Handler-Trigger Binding
        protected virtual void EventInvocationWrapper(NetSharpEventArgs netSharpEventArgs,
            EventHandler<NetSharpEventArgs> eventHandler)
        {
            if (eventHandler != null)
            {
                eventHandler(this, netSharpEventArgs);
            }
        }

        public void SessionDataRecievedTrigger(DataStream DataStream, Session session)
        {
            EventInvocationWrapper(new NetSharpEventArgs(DataStream, session), SessionDataRecieved);
        }

        public void SessionErrorOccuredTrigger(string exceptionMessage)
        {
            EventInvocationWrapper(new NetSharpEventArgs(null, null, exceptionMessage), SessionErrorOccured);
        }

        private void Connect()
        {
            if (!_tcpClient.Connected)
            {
                _tcpClient.Connect(RemoteEndpointIp);
                RemoteEndpointIpAddressPort = _tcpClient.Client.RemoteEndPoint.ToString();
            }
            _networkStream = _tcpClient.GetStream();
            AsyncStreamReader();
        }

        public void Disconnect()
        {
            if (_tcpClient.Connected)
            {
                _networkStream.Close();
                _tcpClient.Close();
            }
        }

        public void SendData(DataStream DataStream)
        {
            if (DataStream != null)
            {
                AsyncStreamWriter(DataStream);
            }
        }

        /// <summary>
        ///     Blocks on the NetworkStream of the TcpClient, it recieves data sent across
        ///     the stream and sends it to a parsing function for further processing.
        /// </summary>
        private async void AsyncStreamReader()
        {
            while (!IsDisposed)
            {
                if (_networkStream.CanRead)
                {
                    var protocolInfoBuffer = new byte[10];
                    var initialBytesRead =
                        await _networkStream.ReadAsync(protocolInfoBuffer, 0, protocolInfoBuffer.Length);
                    var dataStream = DataStreamFactory.InitializeStreamObject(protocolInfoBuffer);

                    if (initialBytesRead == 0)
                    {
                        break;
                    }

                    var payloadBytesRead = 0;
                    
                    dataStream.PayloadByteArray = new byte[dataStream.PayloadLength];
                  
                    while (payloadBytesRead < dataStream.PayloadLength)
                    {
                        payloadBytesRead +=
                       await
                           _networkStream.ReadAsync(
                               dataStream.PayloadByteArray, 0,
                               dataStream.PayloadLength);
                    }         

                    SessionDataRecievedTrigger(dataStream, this);

                    if (RemoteEndpointGuid == "notset")
                    {
                        RemoteEndpointGuid = dataStream.Guid;
                    }
                }
            }

            _networkStream.Close();
        }

        private async void AsyncStreamWriter(DataStream DataStream)
        {
            var serializedDataStream = DataStreamFactory.GetStreamByteArray(DataStream);          
            await _networkStream.WriteAsync(serializedDataStream, 0, serializedDataStream.Length);
        }
    }
}