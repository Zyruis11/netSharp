using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using netSharp.Classes;
using Stream = netSharp.Classes.Stream;

namespace netSharp
{
    public class Session : IDisposable
    {
        private readonly TcpClient _tcpClient;
        private ASCIIEncoding _asciiEncoding;
        private NetworkStream _networkStream;
        private Task _streamReaderThread;

        /// <summary>
        /// </summary>
        /// <param name="ipEndPoint"></param>
        /// <param name="sessionType">0 = Session to Client, 1 = Session to ToServer</param>
        /// <param name="tcpClient"></param>
        public Session(int sessionType, IPEndPoint ipEndPoint, string localGuid, TcpClient tcpClient = null)
        {
            switch (sessionType)
            {
                case 0: // Session to Client, generated by Server.
                {
                    if (tcpClient == null)
                    {
                        throw new Exception("Invalid sessionType");
                    }
                    _tcpClient = tcpClient;
                    RemoteEndpointIpAddressPort = _tcpClient.Client.RemoteEndPoint.ToString();
                    break;
                }
                case 1: // Session to Server, generated by Client.
                {
                    if (tcpClient != null)
                    {
                        throw new Exception("Invalid sessionType");
                    }
                    _tcpClient = new TcpClient();
                    RemoteEndpointIp = ipEndPoint;
                    break;
                }
                default:
                {
                    Dispose();
                    throw new Exception("Invalid/Unspecified sessionType.");
                }
            }

            LocalEndpointGuid = localGuid;
            RemoteEndpointGuid = "notset";
            Connect();
        }

        public bool IsDisposed { get; set; }
        public int LastTwoWay { get; set; }
        public string RemoteEndpointGuid { get; set; }
        public string LocalEndpointGuid { get; set; }
        public IPEndPoint RemoteEndpointIp { get; set; }
        public string RemoteEndpointIpAddressPort { get; set; }
        public int HelloInterval { get; set; }

        public void Dispose()
        {
            Disconnect();
            IsDisposed = true;
        }

        private void Connect()
        {
            if (!_tcpClient.Connected)
            {
                _tcpClient.Connect(RemoteEndpointIp);
                RemoteEndpointIpAddressPort = _tcpClient.Client.RemoteEndPoint.ToString();
            }
            _networkStream = _tcpClient.GetStream();
            StartStreamReaderTask();
        }

        public void Disconnect()
        {
            if (_tcpClient.Connected)
            {
                _networkStream.Close();
                _tcpClient.Close();
            }
        }

        public void StartStreamReaderTask()
        {
            _streamReaderThread = new Task(StreamReader);
            _streamReaderThread.Start();
        }

        /// <summary>
        ///     Blocks on the NetworkStream of the TcpClient, it recieves data sent across
        ///     the stream and sends it to a parsing function for further processing.
        /// </summary>
        private void StreamReader()
        {
            while (!IsDisposed)
            {
                if (_networkStream.CanRead)
                {      
                    var streamIndex = 10; // Set the stream index to the location of the payload length value in the stream
                    byte[] payloadLengthBuffer = new byte[2]; // Create a buffer to hold the contents of the payload length value
                    streamIndex = _networkStream.Read(payloadLengthBuffer,streamIndex, payloadLengthBuffer.Length);
                                    
                    byte[] streamBuffer = new byte[StreamEngine.GetPayloadLength(payloadLengthBuffer) + streamIndex]; // Create a buffer to hold the contents of the full stream

                    _networkStream.Seek(0, SeekOrigin.Begin); // Rewind the stream
                    
                    streamIndex = 0; // Reset the stream index

                    streamIndex = _networkStream.Read(streamBuffer, streamIndex, streamBuffer.Length); 
                    Stream stream = StreamEngine.ByteArrayToStream(streamBuffer); // Pass the buffer to the deserializer

                    _networkStream.Flush();
                }
                //to-do: Pass the Stream to the handler
            }
        }

        private void StreamWriter(byte[] byteArray)
        {
            _networkStream.Write(byteArray, 0, byteArray.Length);
        }

    }
}